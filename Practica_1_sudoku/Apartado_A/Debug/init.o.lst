   1              	# 1 "../init.asm"
   1              	
   0              	
   0              	
   0              	
   2              	    .extern main
   3              	    .equ STACK, 0x0c7ff000
   4              	.text
   5              	.equ    num, 25  /* this is used to indicate the number of words to copy */
   6              	#        ENTRY                    /* mark the first instruction to call */
   7              	.arm /* indicates that we are using the ARM instruction set */
   8              	#------standard initial code
   9              	# --- Setup interrupt / exception vectors
  10              	.global    start
  11              	.extern     __c_copy_10
  12              	start:
  13 0000 FFFFFFEA 	       B     Reset_Handler
  14              	/* In this version we do not use the following handlers */
  15              	################################################################################
  16              	#-----------Undefined_Handler:
  17              	#      B        Undefined_Handler
  18              	#----------SWI_Handler:
  19              	#      B        SWI_Handler
  20              	#----------Prefetch_Handler:
  21              	#      B        Prefetch_Handler
  22              	#----------Abort_Handler:
  23              	#      B        Abort_Handler
  24              	#      NOP      /* Reserved vector */
  25              	#----------IRQ_Handler:
  26              	#      B        IRQ_Handler
  27              	#----------FIQ_Handler:
  28              	#      B        FIQ_Handler
  29              	
  30              	################################################################################
  31              	# Reset Handler:
  32              	# the processor starts executing this code after system reset
  33              	################################################################################
  34              	Reset_Handler:
  35              	#
  36              	// src = direccion origen de los datos
  37              	// dst = direccion destino de los datos
  38 0004 48D09FE5 	        LDR     sp,=STACK       /*  set up stack pointer (r13) */
  39              	
  40 0008 48009FE5 	        LDR     r0, =src //Cargamos en r0 la direccion origen de los datos
  41 000c 48109FE5 	        LDR     r1, =dst1 //Cargamos en r1 la direccion destino de los datos
  42 0010 050000EB 	        BL      ARM_copy_10   //Llamamos a la funcion arm
  43              	
  44              	//Volvemos a cargar las direcciones porque al llamar a una funcion se han borrado
  45 0014 3C009FE5 	        LDR     r0, =src
  46 0018 40109FE5 	        LDR     r1, =dst2
  47              	# function __c_copy is in copy.c
  48              	
  49 001c 40309FE5 	        LDR     r3, = __c_copy_10
  50 0020 0FE0A0E1 	        MOV     lr, pc
  51 0024 13FF2FE1 	        BX      r3
  52              	stop:
  53 0028 FEFFFFEA 	        B       stop        /*  end of program */
  54              	
  55              	################################################################################
  56              	# funci—n ARM:
  57              	# copia 25 palabras de la direcci—n indicada en r0 a la indicada por r1
  58              	# deber’a crear un marco de pila con la misma estructura que en el resto de llamadas a funciones
  59              	# pero como es un nodo hoja (no llama a ninguna funci—n) vamos a hacer un marco simplificado:
  60              	# s—lo guardamos los registros que utiliza y que no tiene permiso para alterar
  61              	
  62              	//HAY QUE CAMBIAR LA MEMORIA PORQUE SI CARGAMOS MÁS DE 5 EN 5 NOS DA ERROR PORQUE OCUPA LA MEMORIA 
  63              	################################################################################
  64              	ARM_copy_10:
  65 002c FF0F2DE9 	        push {r0-r11}
  66 0030 0120A0E3 			MOV r2, #1
  67              	Loop:
  68 0034 040052E3 			CMP r2, #4
  69 0038 030000AA 	  		BGE Done
  70 003c F80FB0E8 	        LDM r0!, {r3-r11} //Carga 9 valores de la fuente
  71 0040 F80FA1E8 	        STM r1!, {r3-r11} //Escribimos 9 valores en el destino
  72 0044 012082E2 			ADD r2, r2, #1
  73 0048 F9FFFFEA 			B Loop
  74              	  Done:
  75              	        # restore the original registers
  76 004c FF0FBDE8 	        pop {r0-r11}
  77              	        # return to the instruction that called the routine and to arm mode
  78 0050 1EFF2FE1 	        BX      r14
  79              	 ##########################################################################
  80              	
  81              	/*ARM_copy_10:
  82              	        push {r4-r10}
  83              	        mov r9, #1000
  84              			mov r10, #0
  85              	        b test
  86              	  bucle:
  87              			MOV r2, #1
  88              	Loop:
  89              			CMP r2, #6
  90              	  		BGE Done
  91              	        LDM r0!, {r4-r8} //Carga 5 palabras de la fuente
  92              	        STM r1!, {r4-r8} //y ponerlos en el destino
  93              			ADD r2, r2, #1
  94              			B Loop
  95              	  Done:
  96              	
  97              	  		add r10, r10, #1
  98              	  		test:
  99              	  		cmp r10, r9
 100              	  		bne bucle
 101              	        # restore the original registers
 102              	        pop {r4-r10}
 103              	        # return to the instruction that called the routine and to arm mode
 104              	        BX      r14*/
 105              	################################################################################
 106              	#        AREA BlockData, DATA, READWRITE
 107              	#    src:  source block (10 words)
 108              	#    dst1: destination block 1 (25 words)
 109              	#    dst2: destination block 2 (25 words)
 110              	################################################################################
 111              	.data
 112              	.ltorg /* guarantees the alignment */
 113              	src:
 114 0000 01000000 	     .long     1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
 114      02000000 
 114      03000000 
 114      04000000 
 114      05000000 
 115              	dst1:
 116 0064 00000000 	     .long     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 116      00000000 
 116      00000000 
 116      00000000 
 116      00000000 
 117              	dst2:
 118 00c8 00000000 	     .long     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 118      00000000 
 118      00000000 
 118      00000000 
 118      00000000 
 119              	.end
DEFINED SYMBOLS
         ../init.asm:3      *ABS*:0c7ff000 STACK
         ../init.asm:5      *ABS*:00000019 num
         ../init.asm:12     .text:00000000 start
         ../init.asm:34     .text:00000004 Reset_Handler
         ../init.asm:13     .text:00000000 $a
         ../init.asm:113    .data:00000000 src
         ../init.asm:115    .data:00000064 dst1
         ../init.asm:64     .text:0000002c ARM_copy_10
         ../init.asm:117    .data:000000c8 dst2
         ../init.asm:52     .text:00000028 stop
         ../init.asm:67     .text:00000034 Loop
         ../init.asm:74     .text:0000004c Done
         ../init.asm:111    .text:00000054 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__c_copy_10
